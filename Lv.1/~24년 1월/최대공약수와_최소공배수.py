# 문제 설명
# 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요.
# 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.
# 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

# 제한 사항
# 두 수는 1이상 1000000이하의 자연수입니다.

# 유클리드 알고리즘(GCD): Greatest Common Divisor
# 주어진 두 수 사이에 존재하는 최대공약수를 구하는 알고리즘

#

# 2. 최적 코드
n = 2
m = 5

def solution(n, m):
    # 최대공약수 구하기
    for i in range(min(n,m), 0, -1): # 둘 중 작은 수 ~ 1까지 내려가면서
        if n % i == 0 and m % i == 0: # n과 m을 i로 나눴을 때 나머지가 0이면 최대공약수
            gcd = i # 최대공약수 담고 break
            break

    # 최소공배수 구하기
    lcm = (n * m) // gcd # 곱한 두 수를 최대공약수로 나누면 최소공배수

    return [gcd, lcm]

print(solution(n,m))



